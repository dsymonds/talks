Go and protocol buffers
A case study of API design
19 Feb 2013

David Symonds
Software Engineer, Google
dsymonds@golang.org

* Overview

- What are protocol buffers
- Go's API for them
- Design decisions

* History

Communicating servers often have different update schedules.

        if (version == 3) {
                ...
        } else if (version > 4) {
                if (version == 5) {
                        ...
                }
                ...
        }

Writing hand-written parsers for changing protocols sucks.

* Protocol Buffers

- Extensible serialization mechanism
- Compact, fast, relatively simple
- Auto-generated parsing
- Good for RPC messages

* Protocol Buffers - IDL

A `foo.proto` file defines messages.

        message Phone {
                enum Type {
                        MOBILE = 1;
                        HOME = 2;
                        WORK = 3;
                }
                optional Type type = 1 [default = HOME];
                required string number = 2;
        }

        message Person {
                required string name = 1;
                required int32 id = 2;
                optional string email = 3;
                repeated Phone phone = 4;
        }


* Go API

- Messages become structs
- Required/optional fields become pointers to type
- Repeated fields become slices

        type Phone struct {
                Type   *Phone_Type `protobuf:"varint,1,opt,name=type,enum=Phone.Type" json:"type,omitempty"`
                Number *string     `protobuf:"bytes,2,req,name=number" json:"number,omitempty"`
        }

        type Person struct {
                Name  *string  `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
                Id    *int32   `protobuf:"varint,2,req,name=id" json:"id,omitempty"`
                Email *string  `protobuf:"bytes,3,opt,name=email" json:"email,omitempty"`
                Phone []*Phone `protobuf:"bytes,4,rep,name=phone" json:"phone,omitempty"`
        }

- Support library for marshaling/unmarshaling

* Design: distinguishability of setness

- Original design did not have pointers (and thus had good memory layout).
- Protocol buffer semantics require fields to be set/unset => pointers.
- There is some effort in support library to amortize cost.

* Design: enums

- Original design used int32, and generated untyped constants.
- Easy to use the wrong constant.
- Current design uses distinct types; compiler catches many errors.

        type Phone_Type int32

        const (
                Phone_MOBILE Phone_Type = 1
                Phone_HOME   Phone_Type = 2
                Phone_WORK   Phone_Type = 3
        )

        var Phone_Type_name = map[int32]string{ ... }
        var Phone_Type_value = map[string]int32{ ... }

        func (x Phone_Type) Enum() *Phone_Type { ... }

        func (x Phone_Type) String() string { ... }


* Design: getters

TODO
